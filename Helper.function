async function extractTokenInfo(tx) {
  const tokenAddress = tx.tokenMint || tx.accounts?.[0] || tx.signature;
  if (!tokenAddress) return null;

  try {
    const response = await fetch(
      `https://api.helius.xyz/v0/tokens/metadata?api-key=${process.env.HELIUS_API_KEY}`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ mintAccounts: [tokenAddress] })
      }
    );
    const data = await response.json();
    const metadata = data[0] || {};

    return {
      name: metadata.name || `Token_${tokenAddress.slice(0, 8)}`,
      address: tokenAddress,
      liquidity: metadata.liquidity || 1000,
      marketCap: metadata.marketCap || 1000,
      devHolding: metadata.devHolding || 5,
      poolSupply: metadata.poolSupply || 50,
      launchPrice: metadata.price || 0.000005,
      mintAuthRevoked: metadata.mintAuthorityRevoked || false,
      freezeAuthRevoked: metadata.freezeAuthorityRevoked || false,
      mint: tokenAddress
    };
  } catch (error) {
    console.error('Error extracting token info:', error);
    return {
      name: `Token_${tokenAddress.slice(0, 8)}`,
      address: tokenAddress,
      liquidity: 1000,
      marketCap: 1000,
      devHolding: 5,
      poolSupply: 50,
      launchPrice: 0.000005,
      mintAuthRevoked: false,
      freezeAuthRevoked: false,
      mint: tokenAddress
    };
  }
}

function checkAgainstFilters(token, filters) {
  return (
    token.liquidity >= filters.liquidity.min &&
    token.liquidity <= filters.liquidity.max &&
    token.marketCap >= filters.marketCap.min &&
    token.marketCap <= filters.marketCap.max &&
    token.devHolding >= filters.devHolding.min &&
    token.devHolding <= filters.devHolding.max &&
    token.poolSupply >= filters.poolSupply.min &&
    token.poolSupply <= filters.poolSupply.max &&
    token.launchPrice >= filters.launchPrice.min &&
    token.launchPrice <= filters.launchPrice.max &&
    (filters.mintAuthRevoked === false || token.mintAuthRevoked === true) &&
    (filters.freezeAuthRevoked === false || token.freezeAuthRevoked === true)
  );
}

function formatTokenMessage(token) {
  return `
🚀 *New Meme Coin Detected!*
🔤 Name: ${token.name}
💧 Liquidity: ${token.liquidity}
📈 Market Cap: ${token.marketCap}
👨‍💻 Dev Holding: ${token.devHolding}%
🏊 Pool Supply: ${token.poolSupply}%
💰 Launch Price: ${token.launchPrice}
✅ Mint Auth Revoked: ${token.mintAuthRevoked ? 'Yes' : 'No'}
❄️ Freeze Auth Revoked: ${token.freezeAuthRevoked ? 'Yes' : 'No'}
🔗 https://pump.fun/${token.mint}
  `;
}

module.exports = { extractTokenInfo, checkAgainstFilters, formatTokenMessage };
